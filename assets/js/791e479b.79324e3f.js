"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9815],{7138:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var t=i(4848),a=i(8453);const o={sidebar_position:5},s="Configuring Projects and Pipelines",l={id:"tutorials-intermediate/configuring-projects",title:"Configuring Projects and Pipelines",description:"How to manage the configuration of your nodestream project.",source:"@site/docs/tutorials-intermediate/configuring-projects.md",sourceDirName:"tutorials-intermediate",slug:"/tutorials-intermediate/configuring-projects",permalink:"/docs/docs/tutorials-intermediate/configuring-projects",draft:!1,unlisted:!1,editUrl:"https://github.com/nodesteram-proj/docs/tree/main/packages/create-docusaurus/templates/shared/docs/tutorials-intermediate/configuring-projects.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Data Filtering",permalink:"/docs/docs/tutorials-intermediate/filtering-data"},next:{title:"Working With Migrations",permalink:"/docs/docs/tutorials-intermediate/working-with-migrations"}},r={},c=[{value:"Fundementals",id:"fundementals",level:2},{value:"Argument Resolvers",id:"argument-resolvers",level:2},{value:"Configuring Pipelines",id:"configuring-pipelines",level:2},{value:"Injecting Environment Variables with <code>!env</code>",id:"injecting-environment-variables-with-env",level:3},{value:"Injecting File Contents with <code>!include</code>",id:"injecting-file-contents-with-include",level:3},{value:"Injecting Configuration with <code>!config</code>",id:"injecting-configuration-with-config",level:3},{value:"Annotations",id:"annotations",level:3},{value:"Configuring Projects",id:"configuring-projects",level:2},{value:"Annotations",id:"annotations-1",level:3},{value:"Targets",id:"targets",level:3},{value:"Delaying Evaluation with <code>!delayed</code>",id:"delaying-evaluation-with-delayed",level:4},{value:"Scopes And Pipelines",id:"scopes-and-pipelines",level:3},{value:"Simple Configuration",id:"simple-configuration",level:4},{value:"Scope Level Configuration",id:"scope-level-configuration",level:4},{value:"Scope Level Annotations",id:"scope-level-annotations",level:4},{value:"Scope Level Targets",id:"scope-level-targets",level:4},{value:"Naming Pipelines",id:"naming-pipelines",level:4},{value:"Pipeline Level Annotations",id:"pipeline-level-annotations",level:4},{value:"Pipeline Level Targets",id:"pipeline-level-targets",level:4},{value:"Project Plugins",id:"project-plugins",level:3},{value:"Specifying Plugin Configuration",id:"specifying-plugin-configuration",level:4},{value:"Specifying Plugin Annotations",id:"specifying-plugin-annotations",level:4},{value:"Specifying Plugin Targets",id:"specifying-plugin-targets",level:4},{value:"Advanced Plugin Configuration",id:"advanced-plugin-configuration",level:4}];function p(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"configuring-projects-and-pipelines",children:"Configuring Projects and Pipelines"}),"\n",(0,t.jsx)(n.p,{children:"How to manage the configuration of your nodestream project."}),"\n",(0,t.jsx)(n.h2,{id:"fundementals",children:"Fundementals"}),"\n",(0,t.jsx)(n.p,{children:"A nodestream pipeline is declarative.\nAs a result, the pipeline tends to be a combination of configuration and logic.\nWhile the logic is likely to remain static, the configuration is likely to change between environments."}),"\n",(0,t.jsx)(n.p,{children:"For example, you may have a pipeline that reads from an API endpoint in development, but a different API endpoint in production.\nIdeally, you would be able to inject the configuration for the API endpoint into the pipeline at runtime."}),"\n",(0,t.jsx)(n.h2,{id:"argument-resolvers",children:"Argument Resolvers"}),"\n",(0,t.jsxs)(n.p,{children:["Argument resolvers solve the problem of injecting configuration into a pipeline.\nThey are fundemental to the nodestream DSL.\nEach argument resolver is a YAML tag that is resolved at runtime by its means of configuration.\nFor example, the ",(0,t.jsx)(n.code,{children:"!env"})," argument resolver resolves to the value of an environment variable"]}),"\n",(0,t.jsx)(n.h2,{id:"configuring-pipelines",children:"Configuring Pipelines"}),"\n",(0,t.jsxs)(n.h3,{id:"injecting-environment-variables-with-env",children:["Injecting Environment Variables with ",(0,t.jsx)(n.code,{children:"!env"})]}),"\n",(0,t.jsxs)(n.p,{children:["As mentioned, the ",(0,t.jsx)(n.code,{children:"!env"})," argument resolver resolves to the value of an environment variable.\nThis is useful for injecting configuration into a pipeline at runtime."]}),"\n",(0,t.jsx)(n.p,{children:"Lets take our example from earlier. Imagine the start of our pipeline file looks like this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"- implementation: nodestream.pipeline.extractors:SimpleApiExtractor\n  arguments:\n    url: https://example.com/people\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In development, we want to use a different API endpoint.\nWe can use the ",(0,t.jsx)(n.code,{children:"!env"})," argument resolver to inject the configuration at runtime."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"- implementation: nodestream.pipeline.extractors:SimpleApiExtractor\n  arguments:\n    url: !env API_ENDPOINT\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Now, we can set the ",(0,t.jsx)(n.code,{children:"API_ENDPOINT"})," environment variable to ",(0,t.jsx)(n.code,{children:"https://example.com/people"})," in production, and ",(0,t.jsx)(n.code,{children:"https://example.com/people-dev"})," in development."]}),"\n",(0,t.jsxs)(n.p,{children:["NOTE: If you are looking to inject environment variables from a ",(0,t.jsx)(n.code,{children:".env"})," file, you can use the ",(0,t.jsx)(n.code,{children:"nodestream-plugin-dotenv"})," package to load the ",(0,t.jsx)(n.code,{children:".env"})," file and inject the environment variables into the process.\nRead more ",(0,t.jsx)(n.a,{href:"../../official-plugins/dotenv",children:"here"}),"."]}),"\n",(0,t.jsxs)(n.h3,{id:"injecting-file-contents-with-include",children:["Injecting File Contents with ",(0,t.jsx)(n.code,{children:"!include"})]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"!include"})," argument resolver resolves to the contents of a file.\nThis is most useful for injecting large configuraiton blobs into a pipeline and\nas an interpretation sharing technique."]}),"\n",(0,t.jsx)(n.p,{children:"For example, imagine we have two pipelines that share a common set of interpretations.\nWe can extract the interpretations into a file and include it in both pipelines."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"- implementation: nodestream.interpreting:Interpreter\n  arguments:\n    interpretations: !include common/interpretations.yaml\n"})}),"\n",(0,t.jsxs)(n.admonition,{type:"note",children:[(0,t.jsx)(n.mdxAdmonitionTitle,{}),(0,t.jsx)(n.p,{children:"The path is relative to the project root, not the pipeline file."})]}),"\n",(0,t.jsxs)(n.h3,{id:"injecting-configuration-with-config",children:["Injecting Configuration with ",(0,t.jsx)(n.code,{children:"!config"})]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"!config"})," argument resolver resolves to the value of a configuration key.\n",(0,t.jsx)(n.code,{children:"!config"})," is useful for injecting configuration from a speicfied name and allows for a more structured configuration.\nThe ",(0,t.jsx)(n.a,{href:"#configuring-projects",children:"Project Configuration"})," section explains how to set/map configuraiton in the project.\nConfiguration can then be used inline in the pipeline."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"- implementation: nodestream.pipeline.extractors:SimpleApiExtractor\n  arguments:\n    url: !config api_endpoint\n"})}),"\n",(0,t.jsx)(n.h3,{id:"annotations",children:"Annotations"}),"\n",(0,t.jsx)(n.p,{children:"Annotations are a way to accomplish two tasks:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Add metadata to a pipeline"}),"\n",(0,t.jsx)(n.li,{children:"Conditionally include or exclude parts of a pipeline"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Annotations are optionally added to each step in a pipeline.\nThey are a list of strings that are effectively tags for the step."}),"\n",(0,t.jsx)(n.p,{children:"For example, lets say in a live environment we want to pull data from an API, but in a test environment we want to pull data from a file. We can use annotations to conditionally include the step."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"- implementation: nodestream.pipeline.extractors:SimpleApiExtractor\n  arguments:\n    url: !env API_ENDPOINT\n  annotations:\n    - live\n\n- implementation: nodestream.pipeline.extractors:FileExtractor\n  arguments:\n    globs:\n      - !env FILE_PATH\n  annotations:\n    - test\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Then when we want to run the pipeline in a live environment, we can use the ",(0,t.jsx)(n.code,{children:"--annotation"})," flag to include only the steps with the ",(0,t.jsx)(n.code,{children:"live"})," annotation."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"nodestream run my-pipeline --annotation live\n"})}),"\n",(0,t.jsx)(n.p,{children:"Note that steps with no annotations are always included and if you supply multiple annotations, steps that match any of the annotations are included."}),"\n",(0,t.jsx)(n.h2,{id:"configuring-projects",children:"Configuring Projects"}),"\n",(0,t.jsx)(n.h3,{id:"annotations-1",children:"Annotations"}),"\n",(0,t.jsxs)(n.p,{children:["Annotations are key-value pairs that are used to add metadata to a project.\nThey are useful for adding metadata to a project that can be used by plugins or other tools.\nFor example, you may want to add a ",(0,t.jsx)(n.code,{children:"schedule"})," annotation to a project to indicate how often the pipelines in the project should be run by some scheduler."]}),"\n",(0,t.jsxs)(n.p,{children:["Annotations are displayed when you run ",(0,t.jsx)(n.code,{children:"nodestream show"})," and especially useful in ",(0,t.jsx)(n.code,{children:"nodestream show --json"})," for programmatic access to the metadata."]}),"\n",(0,t.jsx)(n.h3,{id:"targets",children:"Targets"}),"\n",(0,t.jsxs)(n.p,{children:["Targets are a destination Graph Database for the output of a pipeline.\nFor each target you can specify the connection details and credentials.\nThe configuration is highly dependent on the target database type, so it is best to refer to the documentation for the target database you are using ",(0,t.jsx)(n.a,{href:"../../category/database-support/",children:"here"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# nodestream.yaml\ntargets:\n  my-target:\n    database: neo4j # The type of database; neo4j, neptune, etc.\n    # ... Connection details and credentials for your target database\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In other parts of the project or from the cli, you can refer to the target by its name, ",(0,t.jsx)(n.code,{children:"my-target"})," in this case."]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["You ",(0,t.jsx)(n.em,{children:"may"})," specify targets inside of your project configuration, by specifying the ",(0,t.jsx)(n.code,{children:"targets"})," key at the ",(0,t.jsx)(n.a,{href:"#scope-level-targets",children:"scope"})," level or at the ",(0,t.jsx)(n.a,{href:"#pipeline-level-targets",children:"pipeline"})," level."]})}),"\n",(0,t.jsxs)(n.h4,{id:"delaying-evaluation-with-delayed",children:["Delaying Evaluation with ",(0,t.jsx)(n.code,{children:"!delayed"})]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"!delayed"})," argument resolver delays the evaluation of the argument until the consuming component (if supported) is ready to evaluate it.\nThis is useful for injecting configuration that is not available at the time of pipeline definition or for allowing the component to re-evaluate the argument at runtime.\nFor instance, the neo4j connector can accept  ",(0,t.jsx)(n.code,{children:"!delayed"})," for the username and password arguments."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"targets:\n  my-target:\n    database: neo4j \n    uri: bolt://localhost:7687\n    username: !delayed \n      value: !env MY_NEO4J_USERNAME\n    password: !delayed\n      value: !env MY_NEO4J_PASSWORD\n"})}),"\n",(0,t.jsx)(n.h3,{id:"scopes-and-pipelines",children:"Scopes And Pipelines"}),"\n",(0,t.jsx)(n.p,{children:"A nodestream project is a collection of pipelines.\nPipelines are organized into one or more scopes.\nConceptually, you can think of a scope as a namespace or folder for pipelines."}),"\n",(0,t.jsxs)(n.p,{children:["For example, you may have a scope for all of your data warehouse pipelines, and another scope for all of your web scraping pipelines.\nAnother common pattern is to have a scope for each way the pipeline is used, such as ",(0,t.jsx)(n.code,{children:"cron"})," and ",(0,t.jsx)(n.code,{children:"perpetual"})," to represent pipelines that are run on a schedule and pipelines that are always running, respectively.\nRegardless of how you choose to organize your pipelines, scopes are a way to group pipelines together and nodestream does not enforce any particular organization."]}),"\n",(0,t.jsx)(n.h4,{id:"simple-configuration",children:"Simple Configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"scopes:\n  cron:\n    pipelines:\n      - pipelines/warehouse.yaml\n      - pipelines/web-scraping.yaml\n  perpetual:\n    pipelines:\n      - pipelines/kafka-consumer.yaml\n"})}),"\n",(0,t.jsx)(n.h4,{id:"scope-level-configuration",children:"Scope Level Configuration"}),"\n",(0,t.jsxs)(n.p,{children:["Configuration (that can be used via ",(0,t.jsx)(n.code,{children:"!config"}),") can be set at the scope level.\nThis is useful for setting configuration that is shared across multiple pipelines in a scope."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"scopes:\n  cron:\n    config:\n      api_endpoint: https://example.com/api\n    pipelines:\n      - pipelines/warehouse.yaml\n      - pipelines/web-scraping.yaml\n  perpetual:\n    config:\n      api_endpoint: https://example.com/api\n    pipelines:\n      - pipelines/kafka-consumer.yaml\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Note that configuration can use other argument resolvers, such as ",(0,t.jsx)(n.code,{children:"!env"})," and ",(0,t.jsx)(n.code,{children:"!include"})," to inject environment variables and file contents into the configuration."]}),"\n",(0,t.jsx)(n.p,{children:"For example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"scopes:\n  cron:\n    config:\n      api_endpoint: !env API_ENDPOINT\n    pipelines:\n      - pipelines/warehouse.yaml\n      - pipelines/web-scraping.yaml\n# ...\n"})}),"\n",(0,t.jsx)(n.h4,{id:"scope-level-annotations",children:"Scope Level Annotations"}),"\n",(0,t.jsx)(n.p,{children:"Annotations can be set at the scope level.\nThe effect is that all pipelines in the scope inherit the annotations."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'scopes:\n  cron:\n    annotations:\n      schedule: "0 0 * * *"\n    pipelines:\n      - pipelines/warehouse.yaml\n      - pipelines/web-scraping.yaml\n'})}),"\n",(0,t.jsx)(n.h4,{id:"scope-level-targets",children:"Scope Level Targets"}),"\n",(0,t.jsx)(n.p,{children:"Targets can be set at the scope level.\nThe effect is that all pipelines in a scope implictly write to the target(s) specified at the scope level."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"scopes:\n  cron:\n    targets:\n      - my-target\n    pipelines:\n      - pipelines/warehouse.yaml\n      - pipelines/web-scraping.yaml\n"})}),"\n",(0,t.jsx)(n.h4,{id:"naming-pipelines",children:"Naming Pipelines"}),"\n",(0,t.jsxs)(n.p,{children:["By default, the name of the pipeline is the name of the file without the ",(0,t.jsx)(n.code,{children:".yaml"})," extension.\nYou can override the name of the pipeline by specifying the ",(0,t.jsx)(n.code,{children:"name"})," key in the pipeline configuration."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"scopes:\n  cron:\n    pipelines:\n      - name: my-warehouse-pipeline\n        path: pipelines/warehouse.yaml\n"})}),"\n",(0,t.jsx)(n.h4,{id:"pipeline-level-annotations",children:"Pipeline Level Annotations"}),"\n",(0,t.jsx)(n.p,{children:"Annotations can be set at the pipeline level.\nThis is useful for adding metadata to a pipeline that is not shared with other pipelines in the scope."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'scopes:\n  cron:\n    pipelines:\n      - path: pipelines/warehouse.yaml\n        annotations:\n          schedule: "0 0 * * *"\n      - path: pipelines/web-scraping.yaml\n        annotations:\n          schedule: "0 10 * * *"\n'})}),"\n",(0,t.jsx)(n.h4,{id:"pipeline-level-targets",children:"Pipeline Level Targets"}),"\n",(0,t.jsx)(n.p,{children:"Targets can be set at the pipeline level.\nThis is useful for specifying that a pipeline writes to a different target than the one specified at the scope level."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"scopes:\n  cron:\n    pipelines:\n      - path: pipelines/warehouse.yaml\n        targets:\n          - my-other-target\n      - path: pipelines/web-scraping.yaml\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You can also specify that the pipeline does not inherit the targets from the scope by ",(0,t.jsx)(n.code,{children:"exclude_inherited_targets"})," key."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"scopes:\n  cron:\n    targets:\n      - my-target\n    pipelines:\n      - pipelines/web-scraping.yaml\n      - path: pipelines/warehouse.yaml\n        exclude_inherited_targets: true\n        targets:\n          - my-other-target\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In this case, the ",(0,t.jsx)(n.code,{children:"warehouse"})," pipeline writes to ",(0,t.jsx)(n.code,{children:"my-other-target"})," and the ",(0,t.jsx)(n.code,{children:"web-scraping"})," pipeline writes to ",(0,t.jsx)(n.code,{children:"my-target"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"project-plugins",children:"Project Plugins"}),"\n",(0,t.jsx)(n.h4,{id:"specifying-plugin-configuration",children:"Specifying Plugin Configuration"}),"\n",(0,t.jsxs)(n.p,{children:["In nodestream, some plugins can be used to compose new scopes and pipelines\ninto your project.\nThe ",(0,t.jsx)(n.code,{children:"!config"})," YAML tag followed by a key can be used to provide end-user configurable values for project plugin pipelines.\nFor example, in a project plugin pipeline, you can use the ",(0,t.jsx)(n.code,{children:"!config"})," tag to specify a ",(0,t.jsx)(n.code,{children:"name"})," for the pipeline."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# pipeline-inside-project-plugin.yaml\n- implementation: myPlugin.testPipeline:SomePluginExtractor\n  arguments:\n    username: !config 'service_username'\n    password: !config 'service_password'\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In the above example, the ",(0,t.jsx)(n.code,{children:"!config"})," tag is used to specify the ",(0,t.jsx)(n.code,{children:"username"})," and ",(0,t.jsx)(n.code,{children:"password"})," for the pipeline.\nEnd users can provide values for the !config plugin tags in their nodestream.yaml file.\nThis feature is particularly useful for supplying user-provided information such as URLs and credentials."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'plugins:\n  - name: myPlugin\n    config:\n      username: !env MY_TEST_PLUGIN_USERNAME\n      password: !env MY_TEST_PLUGIN_PASSWORD\n  - name: otherPlugin\n    config:\n      service_base_url: "https://otherurl.com"\n'})}),"\n",(0,t.jsx)(n.h4,{id:"specifying-plugin-annotations",children:"Specifying Plugin Annotations"}),"\n",(0,t.jsxs)(n.p,{children:["Plugins can also be annotated with metadata just the way you can in your own pipelines and scopes.\nThe ",(0,t.jsx)(n.code,{children:"annotations"})," key can be used to specify metadata for a plugin."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'plugins:\n  - name: myPlugin\n    annotations:\n      schedule: "0 0 * * *"\n'})}),"\n",(0,t.jsx)(n.h4,{id:"specifying-plugin-targets",children:"Specifying Plugin Targets"}),"\n",(0,t.jsxs)(n.p,{children:["Plugins can also be configured to write to specific targets.\nThe ",(0,t.jsx)(n.code,{children:"targets"})," key can be used to specify the targets that the plugin writes to."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"plugins:\n  - name: myPlugin\n    targets:\n      - my-target\n"})}),"\n",(0,t.jsx)(n.h4,{id:"advanced-plugin-configuration",children:"Advanced Plugin Configuration"}),"\n",(0,t.jsxs)(n.p,{children:["Just as with scopes and pipelines, you can use a complex configuration for plugins as well. For example, this uses a combination of ",(0,t.jsx)(n.code,{children:"config"}),", ",(0,t.jsx)(n.code,{children:"annotations"}),", and ",(0,t.jsx)(n.code,{children:"targets"})," for a plugin as well as the ",(0,t.jsx)(n.code,{children:"exclude_inherited_targets"})," key."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'plugins:\n  - name: myplugin\n    config:\n      service_base_url: "https://otherurl.com"\n    targets:\n      - target1\n      - target2\n    pipelines:\n        - name: plugin_pipeline_1\n          exclude_inherited_targets: True\n          annotations:\n              my_annoation: True\n          targets:\n              - target3\n'})})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>l});var t=i(6540);const a={},o=t.createContext(a);function s(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);