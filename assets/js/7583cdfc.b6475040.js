"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4760],{1136:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=a(7624),s=a(2172);const o={},r="Nodestream 0.12 Release",i={permalink:"/docs/blog/2024/03/30/nodestream-0-12",editUrl:"https://github.com/nodesteram-proj/docs/tree/main/packages/create-docusaurus/templates/shared/blog/2024-03-30-nodestream-0-12/index.md",source:"@site/blog/2024-03-30-nodestream-0-12/index.md",title:"Nodestream 0.12 Release",description:"We are happy to announce the release of Nodestream 0.12.",date:"2024-03-30T00:00:00.000Z",formattedDate:"March 30, 2024",tags:[],readingTime:2.745,hasTruncateMarker:!1,authors:[],frontMatter:{},unlisted:!1,prevItem:{title:"Welcome",permalink:"/docs/blog/welcome"}},d={authorsImageUrls:[]},c=[{value:"Database Migrations",id:"database-migrations",level:2},{value:"Multi-Database Support",id:"multi-database-support",level:2},{value:"Parquet Support",id:"parquet-support",level:2},{value:"Performance Improvements",id:"performance-improvements",level:2}];function l(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.M)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:"We are happy to announce the release of Nodestream 0.12.\nThis release marks the largest update to Nodestream since its inception.\nWe've spent a lot of time improving the core of nodestream and we're excited to share it with you."}),"\n",(0,n.jsxs)(t.p,{children:["Before we get into the details, we want to thank the community for their support and feedback.\nAs such, we have completely revamped the documentation to make it easier to use and navigate.\nThis releases comes with two headline features ",(0,n.jsx)(t.a,{href:"#database-migrations",children:"Database Migrations"})," and ",(0,n.jsx)(t.a,{href:"#multi-database-support",children:"Multi-Database Support"}),"."]}),"\n",(0,n.jsx)(t.h2,{id:"database-migrations",children:"Database Migrations"}),"\n",(0,n.jsx)(t.p,{children:"In the past, nodestream attempted to automatically create indexes and constraints on the database based on your pipeline at runtime.\nThis was done by introspecting the schema of the entire project and generating the appropriate queries to create the indexes and constraints.\nThis was a very powerful feature but it had a few drawbacks:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"It was redundant."})," The same indexes and constraints were being created with ",(0,n.jsx)(t.code,{children:"IF NOT EXISTS"})," clauses every time the pipeline was run."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"It was slow."})," The queries were being executed serially and the pipeline was locked until they were all completed."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"It was error prone."})," If the database was not in a state that allowed for the creation of the indexes and constraints, the pipeline would fail."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"It was high friction."})," There was no way to refactor the database without manual intervention. If the schema changed, the pipeline would fail and the user would have to manually remove the indexes, constraints, and sometimes data before running the pipeline again."]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["To address these issues, ",(0,n.jsx)(t.code,{children:"nodestream"})," 0.12 has introduced the concept of migrations.\nMigrations are a way of encapsulating changes to the database schema in a way that can be applied incrementally.\nConceptually, they are similar to the migrations in the ",(0,n.jsx)(t.a,{href:"https://docs.djangoproject.com/en/5.0/topics/migrations/",children:"Django"}),", ",(0,n.jsx)(t.a,{href:"https://guides.rubyonrails.org/v3.2/migrations.html",children:"Rails"}),", ",(0,n.jsx)(t.a,{href:"https://neo4j.com/labs/neo4j-migrations/2.0/",children:"Neo4j Migrations"}),", and ",(0,n.jsx)(t.a,{href:"https://documentation.red-gate.com/fd/migrations-184127470.html",children:"Flyway"})," frameworks."]}),"\n",(0,n.jsxs)(t.p,{children:["Migrations are defined in a directory called ",(0,n.jsx)(t.code,{children:"migrations"})," in the root of your project.\nEach migration is a yaml file that contains data about the migration and its dependencies.\nYou can create migrations by running the ",(0,n.jsx)(t.code,{children:"nodestream migrations make"})," command."]}),"\n",(0,n.jsx)(t.h2,{id:"multi-database-support",children:"Multi-Database Support"}),"\n",(0,n.jsxs)(t.p,{children:["Prior to this release, the only database that was supported was neo4j.\nWhile this is an category leading database, the goal of nodestream is to be database agnostic.\nAs such, we are happy to announce that nodestream now supports ",(0,n.jsx)(t.a,{href:"https://aws.amazon.com/neptune/",children:"Amazon Neptune"})," and ",(0,n.jsx)(t.a,{href:"https://docs.aws.amazon.com/neptune-analytics/latest/userguide/what-is-neptune-analytics.html",children:"Amazon Neptune Analytics"}),".\nTO accomedate that, we have moved the neo4j database connector into a separate package called ",(0,n.jsx)(t.a,{href:"https://pypi.org/project/nodestream-plugin-neo4j/",children:"nodestream-plugin-neo4j"})," and added a new package called ",(0,n.jsx)(t.a,{href:"https://pypi.org/project/nodestream-plugin-neptune/",children:"nodestream-plugin-neptune"}),"."]}),"\n",(0,n.jsx)(t.p,{children:"Thank you to the following folks from AWS to make that happen:"}),"\n",(0,n.jsx)(t.p,{children:"-- TODO: Get the links to all of the AWS folks who helped us with this."}),"\n",(0,n.jsx)(t.h2,{id:"parquet-support",children:"Parquet Support"}),"\n",(0,n.jsx)(t.p,{children:"Many customers have data stored in parquet format.\nPaquet is a columnar storage format that is optimized for reading and writing large datasets.\nWe are happy to announce that nodestream now supports parquet as a first class citizen."}),"\n",(0,n.jsx)(t.h2,{id:"performance-improvements",children:"Performance Improvements"}),"\n",(0,n.jsxs)(t.p,{children:["We've made a small number of performance improvements to the core of nodestream that should result in faster processing times and lower memory usage.\nMost notably, we've cache the ",(0,n.jsx)(t.code,{children:"last_ingested_at"})," timestamp for nodes and relationships to reduce the number of times we create objects in memory.\nWe've observed a 10% improvement in processing times and a 5% reduction in memory usage in our benchmarks."]})]})}function h(e={}){const{wrapper:t}={...(0,s.M)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},2172:(e,t,a)=>{a.d(t,{I:()=>i,M:()=>r});var n=a(1504);const s={},o=n.createContext(s);function r(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);