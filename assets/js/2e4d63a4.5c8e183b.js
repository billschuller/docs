"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9274],{5502:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var t=i(4848),a=i(8453);const o={sidebar_position:6},r="Working With Migrations",s={id:"tutorials-intermediate/working-with-migrations",title:"Working With Migrations",description:"Learn how to manage database changes in nodestream.",source:"@site/docs/tutorials-intermediate/working-with-migrations.md",sourceDirName:"tutorials-intermediate",slug:"/tutorials-intermediate/working-with-migrations",permalink:"/docs/docs/tutorials-intermediate/working-with-migrations",draft:!1,unlisted:!1,editUrl:"https://github.com/nodesteram-proj/docs/tree/main/packages/create-docusaurus/templates/shared/docs/tutorials-intermediate/working-with-migrations.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Configuring Projects and Pipelines",permalink:"/docs/docs/tutorials-intermediate/configuring-projects"},next:{title:"Removing Data",permalink:"/docs/docs/tutorials-intermediate/removing-data"}},d={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Generating Migrations",id:"generating-migrations",level:2},{value:"Running Migrations",id:"running-migrations",level:2},{value:"Squash Migrations",id:"squash-migrations",level:2},{value:"Rollback Migrations",id:"rollback-migrations",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"working-with-migrations",children:"Working With Migrations"}),"\n",(0,t.jsx)(n.p,{children:"Learn how to manage database changes in nodestream."}),"\n",(0,t.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsx)(n.p,{children:"In nodestream, migrations are used to manage changes to the database schema.\nMigrations are defined in a YAML file and are executed in order to bring the database schema up to date.\nHowever, users do not generally need to write migrations directly.\nInstead, nodestream provides a set of commands to generate migrations based on changes to the node and relationship definitions."}),"\n",(0,t.jsx)(n.h2,{id:"generating-migrations",children:"Generating Migrations"}),"\n",(0,t.jsxs)(n.p,{children:["To generate a migration, use the ",(0,t.jsx)(n.code,{children:"nodestream migrations make"})," command.\nThis command will generate a migration file in the ",(0,t.jsx)(n.code,{children:"migrations"})," directory of your project.\nThe migration file will contain the changes to the schema that are needed to bring the database up to date based on the current state of your project schema and what migrations have already been generated.\nIf you do not have a ",(0,t.jsx)(n.code,{children:"migrations"})," directory, nodestream will create one for you\nand generate a migration file that will create the current schema."]}),"\n",(0,t.jsx)(n.p,{children:"For example, if you add a new node definition to one of your pipelines, you can generate a migration to create the new node by running the following command:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"nodestream migrations make\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This will generate a migration file in the ",(0,t.jsx)(n.code,{children:"migrations"})," directory of your project."]}),"\n",(0,t.jsx)(n.p,{children:"Note that not all possible changes to the schema are currently supported by migrations.\nNodestream currently supports the following types of changes:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Adding a new node type"}),"\n",(0,t.jsx)(n.li,{children:"Adding a new relationship type"}),"\n",(0,t.jsx)(n.li,{children:"Adding a new property to a node type"}),"\n",(0,t.jsx)(n.li,{children:"Adding a new property to a relationship type"}),"\n",(0,t.jsx)(n.li,{children:"Adding a new index to a node type"}),"\n",(0,t.jsx)(n.li,{children:"Adding a new index to a relationship type"}),"\n",(0,t.jsx)(n.li,{children:"Removing a node type"}),"\n",(0,t.jsx)(n.li,{children:"Removing a relationship type"}),"\n",(0,t.jsx)(n.li,{children:"Removing a property from a node type"}),"\n",(0,t.jsx)(n.li,{children:"Removing a property from a relationship type"}),"\n",(0,t.jsx)(n.li,{children:"Removing an index from a node type"}),"\n",(0,t.jsx)(n.li,{children:"Removing an index from a relationship type"}),"\n",(0,t.jsx)(n.li,{children:"Extending the key of a node type"}),"\n",(0,t.jsx)(n.li,{children:"Extending the key of a relationship type"}),"\n",(0,t.jsx)(n.li,{children:"Renaming a node type"}),"\n",(0,t.jsx)(n.li,{children:"Renaming a relationship type"}),"\n",(0,t.jsx)(n.li,{children:"Renaming a property of a node type"}),"\n",(0,t.jsx)(n.li,{children:"Renaming a property of a relationship type"}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["Depending on the underlying graph database, some of these changes may not be supported or do nothing. See the documentation for your specific graph database for more information ",(0,t.jsx)(n.a,{href:"../../category/database-support",children:"here"}),"."]})}),"\n",(0,t.jsx)(n.h2,{id:"running-migrations",children:"Running Migrations"}),"\n",(0,t.jsxs)(n.p,{children:["To run the migrations, use the ",(0,t.jsx)(n.code,{children:"nodestream migrations run"})," command.\nThis command will execute any migrations that have not yet been run.\nYou must specify what databases to target with the ",(0,t.jsx)(n.code,{children:"--target"})," option.\nFor example, to run the migrations on the ",(0,t.jsx)(n.code,{children:"default"})," database, you would run the following command:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"nodestream migrations run --target default\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If you have multiple databases, you can use the ",(0,t.jsx)(n.code,{children:"--target"})," option repeatedly to specify multiple databases."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"nodestream migrations run --target default --target other\n"})}),"\n",(0,t.jsx)(n.h2,{id:"squash-migrations",children:"Squash Migrations"}),"\n",(0,t.jsx)(n.p,{children:"Nodestream supports squashing migrations.\nThis means that you can take a set of migrations and squash them into a single, optimized set of migrations.\nThis can be useful for cleaning up the migration node count and making it easier to understand the data model.\nAdditionally, the old migrations are still stored in the project, so you can always go back to them if you need to.\nIf a database has partially applied a sequence of migrations that was squashed, we can't used the squashed migration.\nInstead, the logic will fall back to the original migrations."}),"\n",(0,t.jsxs)(n.p,{children:["To squash migrations, use the ",(0,t.jsx)(n.code,{children:"nodestream migrations squash"})," command.\nThis command requires passing the ",(0,t.jsx)(n.code,{children:"--from"})," migration and optionally the ",(0,t.jsx)(n.code,{children:"-to"})," migration to squash."]}),"\n",(0,t.jsx)(n.p,{children:"Lets assume you have migrations from 1 to 5 and you want to squash them into a single migration.\nYou can run the following command:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"nodestream migrations squash --from 1 --to 5\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If ",(0,t.jsx)(n.code,{children:"5"})," is the last migration, you can squash all migrations up to ",(0,t.jsx)(n.code,{children:"5"})," by running:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"nodestream migrations squash --from 1\n"})}),"\n",(0,t.jsx)(n.h2,{id:"rollback-migrations",children:"Rollback Migrations"}),"\n",(0,t.jsx)(n.p,{children:"Currently, nodestream does not support rolling back migrations."})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>s});var t=i(6540);const a={},o=t.createContext(a);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);