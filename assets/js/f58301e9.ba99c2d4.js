"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6468],{3695:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>d});var s=t(4848),i=t(8453);const r={sidebar_position:5},o="Running The Pipeline",a={id:"tutorial-basics/run-the-pipeline",title:"Running The Pipeline",description:"Let's get the data moving!",source:"@site/docs/tutorial-basics/run-the-pipeline.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/run-the-pipeline",permalink:"/docs/docs/tutorial-basics/run-the-pipeline",draft:!1,unlisted:!1,editUrl:"https://github.com/nodesteram-proj/docs/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-basics/run-the-pipeline.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Prepare Your Database",permalink:"/docs/docs/tutorial-basics/prepare-your-database"},next:{title:"Congratulations!",permalink:"/docs/docs/tutorial-basics/next-steps"}},c={},d=[];function l(e){const n={code:"code",h1:"h1",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"running-the-pipeline",children:"Running The Pipeline"}),"\n",(0,s.jsx)(n.p,{children:"Let's get the data moving!"}),"\n",(0,s.jsx)(n.p,{children:"Alright! We've got a pipeline, some data, and a database. Now it's time to run the pipeline and load the data into our database."}),"\n",(0,s.jsx)(n.p,{children:"That is super easy to do with Nodestream. Just run the following command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"nodestream run\n"})}),"\n",(0,s.jsx)(n.p,{children:"When you run this command, Nodestream will execute all pipelines in your project and load the data into your database."}),"\n",(0,s.jsxs)(n.p,{children:["If you'd rather be explicit (or selective) about which pipelines to run, you can specify the pipeline name(s) as an argument to the ",(0,s.jsx)(n.code,{children:"run"})," command:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"nodestream run org-chart\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This will only run the ",(0,s.jsx)(n.code,{children:"org-chart"})," pipeline."]}),"\n",(0,s.jsxs)(n.p,{children:["You can also increase verbosity of the output by using the ",(0,s.jsx)(n.code,{children:"-v"}),", ",(0,s.jsx)(n.code,{children:"-vv"}),", or ",(0,s.jsx)(n.code,{children:"-vvv"})," flags.\nAnd you can enable structured json output with the ",(0,s.jsx)(n.code,{children:"--json"})," flag."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"nodestream run -vvv --json\n"})}),"\n",(0,s.jsx)(n.p,{children:"That's it! You've now run your first pipeline with Nodestream. \ud83c\udf89"})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(6540);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);