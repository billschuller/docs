"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1486],{6148:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>l,frontMatter:()=>s,metadata:()=>d,toc:()=>c});var r=t(4848),i=t(8453);const s={},o="Interpretations",d={id:"developer-reference/interpreting",title:"Interpretations",description:"In the diagram some details are skipped to keep the picture clean.",source:"@site/docs/developer-reference/interpreting.md",sourceDirName:"developer-reference",slug:"/developer-reference/interpreting",permalink:"/docs/docs/developer-reference/interpreting",draft:!1,unlisted:!1,editUrl:"https://github.com/nodesteram-proj/docs/tree/main/packages/create-docusaurus/templates/shared/docs/developer-reference/interpreting.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Developer Reference",permalink:"/docs/docs/category/developer-reference"}},a={},c=[];function p(e){const n={code:"code",h1:"h1",li:"li",mermaid:"mermaid",ol:"ol",p:"p",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"interpretations",children:"Interpretations"}),"\n",(0,r.jsx)(n.h1,{id:"sequence-diagram",children:"Sequence Diagram"}),"\n",(0,r.jsxs)(n.p,{children:["In the diagram some details are skipped to keep the picture clean.\n",(0,r.jsx)(n.code,{children:"Pipeline"})," is an abstraction for all the things happening before Interpreter step. Similarly ",(0,r.jsx)(n.code,{children:"Writer"})," is included\nto show where the product of interpretation is consumed. Read the narrative for\nadditional details."]}),"\n",(0,r.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant P as Pipeline\n    participant I as Interpreter\n    participant C as ProviderContext\n    participant Int as Interpretation\n    participant D as DesiredIngestion\n    participant W as Writer\n    participant S as IngestionStrategy\n\n    P->>I: init(interpretations)\n    P->>W: init(IngestionStrategy)\n    P->>I: handle_async_record_stream\n    I->>I: interpret record from stream\n    I->>C: fresh(record)\n    Note over C: DesiredIngestion Created\n    C->>I: context\n    I->>Int: interpret(context)\n    Int->>D: add_source_node()\n    Int->>D: add_relationship()\n    I->>P: desired_ingestion\n    P->>W: write_record(desired_ingestion)\n    W->>D: ingest(IngestionStrategy)\n    D->>S: ingest_source_node\n    D->>S: ingest_relationship "}),"\n",(0,r.jsx)(n.p,{children:"Narrative for the above diagram:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["When a pipeline with ",(0,r.jsx)(n.code,{children:"Interpreter"})," step starts up, it initializes ",(0,r.jsx)(n.code,{children:"Interpreter"})," with interpretations from the pipeline YAML file"]}),"\n",(0,r.jsxs)(n.li,{children:["It also adds the ",(0,r.jsx)(n.code,{children:"Writer"})," step based on targets specified in nodestream.yaml"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Interpreter"})," will handle a record stream from the pipeline and start interpreting each record"]}),"\n",(0,r.jsxs)(n.li,{children:["It starts out by creating a context with a blank ",(0,r.jsx)(n.code,{children:"DesiredIngestion"})]}),"\n",(0,r.jsxs)(n.li,{children:["It then feeds the ",(0,r.jsx)(n.code,{children:"DesiredIngestion"})," into every interpretation specified in the pipeline YAML file."]}),"\n",(0,r.jsxs)(n.li,{children:["The most common interpretation is the ",(0,r.jsx)(n.code,{children:"SourceNodeInterpretation"}),", and it adds a source ",(0,r.jsx)(n.code,{children:"Node"})," to the ",(0,r.jsx)(n.code,{children:"DesiredIngestion"})]}),"\n",(0,r.jsxs)(n.li,{children:["A ",(0,r.jsx)(n.code,{children:"RelationshipInterpretation"})," adds a ",(0,r.jsx)(n.code,{children:"RelationshipWithNodes"})," to the ",(0,r.jsx)(n.code,{children:"DesiredIngestion"})]}),"\n",(0,r.jsx)(n.li,{children:"The Interpreter then yields the DesiredIngestion to the pipeline."}),"\n",(0,r.jsxs)(n.li,{children:["At the end of the pipeline the ",(0,r.jsx)(n.code,{children:"Writer"})," step processes the ",(0,r.jsx)(n.code,{children:"DesiredIngestion"})," using the configured ",(0,r.jsx)(n.code,{children:"IngestionStrategy"})]}),"\n"]})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>d});var r=t(6540);const i={},s=r.createContext(i);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);