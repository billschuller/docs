"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5120],{3384:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>d,toc:()=>p});var r=t(7624),a=t(2172),i=t(8888),s=t(3008);const o={sidebar_position:4},l="Extending the DSL",d={id:"tutorials-advanced/extending-the-dsl",title:"Extending the DSL",description:"Extend the Nodestream DSL to create new ways to collect and process data.",source:"@site/docs/tutorials-advanced/extending-the-dsl.mdx",sourceDirName:"tutorials-advanced",slug:"/tutorials-advanced/extending-the-dsl",permalink:"/docs/docs/tutorials-advanced/extending-the-dsl",draft:!1,unlisted:!1,editUrl:"https://github.com/nodesteram-proj/docs/tree/main/packages/create-docusaurus/templates/shared/docs/tutorials-advanced/extending-the-dsl.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Building a Plugin",permalink:"/docs/docs/tutorials-advanced/building-plugins"},next:{title:"Extending the CLI",permalink:"/docs/docs/tutorials-advanced/extending-the-cli"}},c={},p=[{value:"Overview",id:"overview",level:2},{value:"Supporting New File Types",id:"supporting-new-file-types",level:2},{value:"Implementing a New File Type",id:"implementing-a-new-file-type",level:3},{value:"Registering the New File Type",id:"registering-the-new-file-type",level:3},{value:"Using the New File Type",id:"using-the-new-file-type",level:3},{value:"Creating an Interpretation",id:"creating-an-interpretation",level:2},{value:"Implementing a New Interpretation",id:"implementing-a-new-interpretation",level:3},{value:"Registering the New Interpretation",id:"registering-the-new-interpretation",level:3},{value:"Using an Interpretation",id:"using-an-interpretation",level:3},{value:"Creating a Value Provider",id:"creating-a-value-provider",level:2},{value:"Implementing a New Value Provider",id:"implementing-a-new-value-provider",level:3},{value:"Registering the New Value Provider",id:"registering-the-new-value-provider",level:3},{value:"Using a Value Provider",id:"using-a-value-provider",level:3},{value:"Creating a Normalizer",id:"creating-a-normalizer",level:2},{value:"Implementing a New Normalizer",id:"implementing-a-new-normalizer",level:3},{value:"Registering the New Normalizer",id:"registering-the-new-normalizer",level:3},{value:"Using a Normalizer",id:"using-a-normalizer",level:3},{value:"Creating an Argument Resolver",id:"creating-an-argument-resolver",level:2},{value:"Implementing a New Argument Resolver",id:"implementing-a-new-argument-resolver",level:3},{value:"Registering the New Argument Resolver",id:"registering-the-new-argument-resolver",level:3},{value:"Using an Argument Resolver",id:"using-an-argument-resolver",level:3}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.M)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"extending-the-dsl",children:"Extending the DSL"}),"\n",(0,r.jsx)(n.p,{children:"Extend the Nodestream DSL to create new ways to collect and process data."}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(n.p,{children:["The Nodestream DSL is a powerful way to define how data is collected and modeled as a graph.\nYou can extend the DSL to create new ways to collect and process data.\nYou can either include these customizations an a ",(0,r.jsx)(n.a,{href:"../building-plugins",children:"plugin"})," or as a part of your own codebase."]}),"\n",(0,r.jsx)(n.h2,{id:"supporting-new-file-types",children:"Supporting New File Types"}),"\n",(0,r.jsxs)(n.p,{children:["As documented in the ",(0,r.jsx)(n.a,{href:"../../reference/extractors#the-file-extractor-family",children:"File Extractor Family"})," section, nodestream supports a variety of file types.\nYou can add support for new file types by creating a ",(0,r.jsx)(n.a,{href:"../new-steps#creating-an-extractor",children:"new extractor"})," or by extending the existing extractors by introducing a supported file type.\nIt is best to prefer the latter approach but if you need to create a new extractor, you can read the ",(0,r.jsx)(n.a,{href:"../new-steps#creating-an-extractor",children:"Creating a New Extractor"})," section.\nThis section will guide you through the process of creating a new file type support."]}),"\n",(0,r.jsx)(n.h3,{id:"implementing-a-new-file-type",children:"Implementing a New File Type"}),"\n",(0,r.jsxs)(n.p,{children:["To start, you need to create a new file type handler class.\nTo do so, subclaas from the ",(0,r.jsx)(n.code,{children:"SupportedFileFormat"})," class and stub the ",(0,r.jsx)(n.code,{children:"read_file_from_handle"})," method."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from nodestream.extractors.files import SupportedFileFormat\n\nclass TabbedSeperatedValues(SupportedFileFormat, alias=".tsv"):\n    def read_file_from_handle(self, fp) -> Iterable[dict]:\n        ...\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"read_file_from_handle"})," method should return an iterable of dictionaries, where each dictionary represents a row in the file.\nThe keys of the dictionary should be the column names and the values should be the values in the row.\nBy default, the ",(0,r.jsx)(n.code,{children:"fp"})," variable is a read handle to the file in ",(0,r.jsx)(n.code,{children:"bytes"})," mode.\nOften times, you will want to read the file in text mode, so you can use the ",(0,r.jsx)(n.code,{children:"io.TextIOWrapper"})," class to wrap the file handle in text mode."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from io import TextIOWrapper\nfrom nodestream.extractors.files import SupportedFileFormat\n\nclass TabbedSeperatedValues(SupportedFileFormat, alias=".tsv"):\n    reader = TextIOWrapper\n\n    def read_file_from_handle(self, text_fp) -> Iterable[dict]:\n            for line in text_fp:\n                ...\n'})}),"\n",(0,r.jsxs)(n.p,{children:["In this case, the ",(0,r.jsx)(n.code,{children:"reader"})," attribute is set to ",(0,r.jsx)(n.code,{children:"TextIOWrapper"})," to indicate that the file should be wrapped in a ",(0,r.jsx)(n.code,{children:"TextIOWrapper"})," object.\nThe ",(0,r.jsx)(n.code,{children:"read_file_from_handle"})," method is now expecting a text file handle and can read the file line by line.\nThus, we can now use the ",(0,r.jsx)(n.code,{children:"csv"})," module to parse the file."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from csv import DictReader\nfrom io import TextIOWrapper\n\nfrom nodestream.extractors.files import SupportedFileFormat\n\n\nclass TabbedSeperatedValues(SupportedFileFormat, alias=".tsv"):\n    reader = TextIOWrapper\n\n    def read_file_from_handle(self, text_fp) -> Iterable[dict]:\n        for row in DictReader(text_fp, delimiter="\\t"):\n            yield row\n'})}),"\n",(0,r.jsx)(n.h3,{id:"registering-the-new-file-type",children:"Registering the New File Type"}),"\n",(0,r.jsxs)(n.p,{children:["File types are registered via the ",(0,r.jsx)(n.a,{href:"https://setuptools.pypa.io/en/latest/userguide/entry_point.html#entry-points-for-plugins",children:"entry_points"})," API of a Python Package.\nSpecifically, the ",(0,r.jsx)(n.code,{children:"entry_point"})," named ",(0,r.jsx)(n.code,{children:"files"})," inside of the ",(0,r.jsx)(n.code,{children:"nodestream.plugins"})," group is loaded.\nThe entry point provided should be a module which has atleast one subclass of ",(0,r.jsx)(n.code,{children:"nodestream.extractors.files:SupportedFileFormat"})," as directed above.\nEach subclass will be registered as an ",(0,r.jsx)(n.code,{children:"SupportedFileFormat"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Depending on how you are building your package, you can register your audit plugin in one of the following ways:"}),"\n",(0,r.jsxs)(i.c,{defaultValue:"pyproject",values:[{label:"pyproject.toml",value:"pyproject"},{label:"poetry",value:"poetry"},{label:"setup.cfg",value:"setup-cfg"},{label:"setup.py",value:"setup-py"}],children:[(0,r.jsx)(s.c,{value:"pyproject",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:'[project.entry-points."nodestream.plugins"]\nfiles = "my_python_package.files"\n'})})}),(0,r.jsx)(s.c,{value:"poetry",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:'[tool.poetry.plugins."nodestream.plugins"]\nfiles = "my_python_package.files"\n'})})}),(0,r.jsx)(s.c,{value:"setup-cfg",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ini",children:"[options.entry_points]\nnodestream.plugins =\n    files = my_python_package.files\n"})})}),(0,r.jsx)(s.c,{value:"setup-py",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from setuptools import setup\n\nsetup(\n    # ...,\n    entry_points = {\n        'nodestream.plugins': [\n            'files = nodestream_plugin_cool.files',\n        ]\n    }\n)\n"})})})]}),"\n",(0,r.jsx)(n.h3,{id:"using-the-new-file-type",children:"Using the New File Type"}),"\n",(0,r.jsx)(n.p,{children:"Once the new file type is registered, it can be used in the DSL as a file extractor.\nThe file extractors will automatically be aware of and use the new file type."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"- implementation: nodestream.pipeline.extractors:FileExtractor\n  arguments:\n    globs:\n      - data/*.tsv\n"})}),"\n",(0,r.jsx)(n.h2,{id:"creating-an-interpretation",children:"Creating an Interpretation"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"../../reference/interpreting#interpretations",children:"Interpreations"})," that are built into nodestream are powerful tools for mapping the data into a graph.\nHowever, you may need to create a new interpretation to handle a specific use case.\nThis section will guide you through the process of creating a new interpretation.\nBefore venturing down this path, it is recommended to read the ",(0,r.jsx)(n.a,{href:"../../reference/interpreting",children:"Interpreting References"})," as well as the ",(0,r.jsx)(n.a,{href:"../../tutorials-intermediate/source-nodes",children:"Source Node"})," and ",(0,r.jsx)(n.a,{href:"../../tutorials-intermediate/relationship-building-techniques",children:"Relationship Building"})," tutorials thoroughly to understand the concepts, best practices, and the existing interpretations."]}),"\n",(0,r.jsx)(n.h3,{id:"implementing-a-new-interpretation",children:"Implementing a New Interpretation"}),"\n",(0,r.jsxs)(n.p,{children:["To start, you need to create a new interpretation class.\nTo do so, subclass from the ",(0,r.jsx)(n.code,{children:"Interpretation"})," class and stub the ",(0,r.jsx)(n.code,{children:"interpret"})," method."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from nodestream.interpreting import Interpretation\nfrom nodestream.pipeline.value_providers import ProviderContext\n\n\nclass MyInterpretation(Interpretation):\n     def interpret(self, context: ProviderContext):\n        ...\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"interpret"})," method should use the ",(0,r.jsx)(n.code,{children:"context"})," object to create nodes and relationships in the graph.\nThe ",(0,r.jsx)(n.code,{children:"context"})," object has methods for creating nodes and relationships, as well as methods for querying the graph and the underlying data being interpreted."]}),"\n",(0,r.jsx)(n.p,{children:"For example, let's say we want to store the positive and negative values of a boolean property in the graph."}),"\n",(0,r.jsxs)(n.p,{children:["For example, if we want to have a ",(0,r.jsx)(n.code,{children:"live"})," and ",(0,r.jsx)(n.code,{children:"archived"})," node ",(0,r.jsx)(n.code,{children:"Posts"}),", we can create a new interpretation to handle this."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from nodestream.interpreting import Interpretation\nfrom nodestream.pipeline.value_providers import ProviderContext, StaticValueOrValueProvider, ValueProvider\n\n\nclass PositiveNegativeProperty(Interpretation, alias="pos_negative"):\n    def __init__(self, positive_property_name: str, negative_property_name: str, value: StaticValueOrValueProvider):\n        self.positive_property_name = positive_property_name\n        self.negative_property_name = negative_property_name\n        self.value = ValueProvider.guarantee_value_provider(value)\n\n    def interpret(self, context: ProviderContext):\n        source_node = context.desired_ingest.source\n        value = self.value.single_value(context)\n        source_node.properties.set(self.positive_property_name, value)\n        source_node.properties.set(self.negative_property_name, not value)\n'})}),"\n",(0,r.jsxs)(n.p,{children:["There is a lot there, so lets break it down.\nFirst, we have the ",(0,r.jsx)(n.code,{children:"__init__"})," method which takes in the ",(0,r.jsx)(n.code,{children:"positive_property_name"}),", ",(0,r.jsx)(n.code,{children:"negative_property_name"}),", and ",(0,r.jsx)(n.code,{children:"value"})," arguments.\nThese values are directly passed from the Yaml location.\nThe ",(0,r.jsx)(n.code,{children:"value"})," argument is wrapped in a ",(0,r.jsx)(n.code,{children:"ValueProvider"})," to ensure that it is a ",(0,r.jsx)(n.code,{children:"ValueProvider"})," object and not a static value."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"interpret"})," method is where the magic happens.\nThe ",(0,r.jsx)(n.code,{children:"context"})," object is used to get the source node and set the properties on the node.\nThen ",(0,r.jsx)(n.code,{children:"value"})," is retrieved from the ",(0,r.jsx)(n.code,{children:"value"})," argument and set on the source node as the ",(0,r.jsx)(n.code,{children:"positive_property_name"}),".\nThen ",(0,r.jsx)(n.code,{children:"not value"})," is set on the source node as the ",(0,r.jsx)(n.code,{children:"negative_property_name"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"registering-the-new-interpretation",children:"Registering the New Interpretation"}),"\n",(0,r.jsxs)(n.p,{children:["Interpretations are registered via the ",(0,r.jsx)(n.a,{href:"https://setuptools.pypa.io/en/latest/userguide/entry_point.html#entry-points-for-plugins",children:"entry_points"})," API of a Python Package.\nSpecifically, the ",(0,r.jsx)(n.code,{children:"entry_point"})," named ",(0,r.jsx)(n.code,{children:"interpretations"})," inside of the ",(0,r.jsx)(n.code,{children:"nodestream.plugins"})," group is loaded.\nThe entry point provided should be a module which has atleast one subclass of ",(0,r.jsx)(n.code,{children:"nodestream.interpreting:Interpretation"})," as directed above.\nEach subclass will be registered as an ",(0,r.jsx)(n.code,{children:"Interpretation"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Depending on how you are building your package, you can register your audit plugin in one of the following ways:"}),"\n",(0,r.jsxs)(i.c,{defaultValue:"pyproject",values:[{label:"pyproject.toml",value:"pyproject"},{label:"poetry",value:"poetry"},{label:"setup.cfg",value:"setup-cfg"},{label:"setup.py",value:"setup-py"}],children:[(0,r.jsx)(s.c,{value:"pyproject",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:'[project.entry-points."nodestream.plugins"]\ninterpretations = "my_python_package.interpretations"\n'})})}),(0,r.jsx)(s.c,{value:"poetry",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:'[tool.poetry.plugins."nodestream.plugins"]\ninterpretations = "my_python_package.interpretations"\n'})})}),(0,r.jsx)(s.c,{value:"setup-cfg",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ini",children:"[options.entry_points]\nnodestream.plugins =\n    interpretations = my_python_package.interpretations\n"})})}),(0,r.jsx)(s.c,{value:"setup-py",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from setuptools import setup\n\nsetup(\n    # ...,\n    entry_points = {\n        'nodestream.plugins': [\n            'interpretations = nodestream_plugin_cool.interpretations',\n        ]\n    }\n)\n"})})})]}),"\n",(0,r.jsx)(n.h3,{id:"using-an-interpretation",children:"Using an Interpretation"}),"\n",(0,r.jsx)(n.p,{children:"Once the new interpretation is registered, it can be used in the DSL as an interpretation.\nThe interpretations will automatically be aware of and use the new interpretation."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"-  type: pos_negative\n   positive_property_name: live\n   negative_property_name: archived\n   value: true\n"})}),"\n",(0,r.jsx)(n.h2,{id:"creating-a-value-provider",children:"Creating a Value Provider"}),"\n",(0,r.jsx)(n.h3,{id:"implementing-a-new-value-provider",children:"Implementing a New Value Provider"}),"\n",(0,r.jsx)(n.h3,{id:"registering-the-new-value-provider",children:"Registering the New Value Provider"}),"\n",(0,r.jsx)(n.h3,{id:"using-a-value-provider",children:"Using a Value Provider"}),"\n",(0,r.jsx)(n.h2,{id:"creating-a-normalizer",children:"Creating a Normalizer"}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.code,{children:"Normalizer"})," allows you to clean data extracted by a ",(0,r.jsx)(n.code,{children:"ValueProvider"}),". They are intended to provided stateless, simple\ntransformations of data. Nodestream has some built in ones that you can view ",(0,r.jsx)(n.a,{href:"../../reference/interpreting#normalizers",children:"here"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"For example, assume that you have numeric numbers that should be rounded to a whole number before being used.\nLet's build a normalizer that does this for us."}),"\n",(0,r.jsx)(n.h3,{id:"implementing-a-new-normalizer",children:"Implementing a New Normalizer"}),"\n",(0,r.jsxs)(n.p,{children:["To start, you need to create a new normalizer class.\nTo do so, subclass from the ",(0,r.jsx)(n.code,{children:"Normalizer"})," class and stub the ",(0,r.jsx)(n.code,{children:"normalize"})," method."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from typing import Any\n\nfrom nodestream.pipeline.normalizers import Normalizer\n\nclass RoundToWholeNumber(Normalizer, alias="round_numbers"):\n    def normalize_value(self, value: Any) -> Any:\n        return int(value) if isinstance(value, float) else value\n'})}),"\n",(0,r.jsx)(n.p,{children:"In this example, we take a value and round it to a whole number if it is a float.\nIf it is not a float, we return the value as is."}),"\n",(0,r.jsx)(n.h3,{id:"registering-the-new-normalizer",children:"Registering the New Normalizer"}),"\n",(0,r.jsxs)(n.p,{children:["Normalizers are registered via the ",(0,r.jsx)(n.a,{href:"https://setuptools.pypa.io/en/latest/userguide/entry_point.html#entry-points-for-plugins",children:"entry_points"})," API of a Python Package. Specifically, the ",(0,r.jsx)(n.code,{children:"entry_point"})," named ",(0,r.jsx)(n.code,{children:"normalizers"})," inside of the ",(0,r.jsx)(n.code,{children:"nodestream.plugins"})," group is loaded. Every Value Provider is expected to be a subclass of ",(0,r.jsx)(n.code,{children:"nodestream.pipeline.normalizers:Normalizer"})," as directed above."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"entry_point"})," should be a module that contains at least one ",(0,r.jsx)(n.code,{children:"Normalizer"})," class. At runtime, the module will be loaded and all classes that inherit from ",(0,r.jsx)(n.code,{children:"nodestream.pipeline.normalizers:Normalizer"})," will be registered."]}),"\n",(0,r.jsxs)(i.c,{defaultValue:"pyproject",values:[{label:"pyproject.toml",value:"pyproject"},{label:"poetry",value:"poetry"},{label:"setup.cfg",value:"setup-cfg"},{label:"setup.py",value:"setup-py"}],children:[(0,r.jsx)(s.c,{value:"pyproject",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:'[project.entry-points."nodestream.plugins"]\nnormalizers = "my_python_package.normalizers"\n'})})}),(0,r.jsx)(s.c,{value:"poetry",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:'[tool.poetry.plugins."nodestream.plugins"]\nnormalizers = "my_python_package.normalizers"\n'})})}),(0,r.jsx)(s.c,{value:"setup-cfg",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ini",children:"[options.entry_points]\nnodestream.plugins =\n    normalizers = my_python_package.normalizers\n"})})}),(0,r.jsx)(s.c,{value:"setup-py",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from setuptools import setup\n\nsetup(\n    # ...,\n    entry_points = {\n        'nodestream.plugins': [\n            'normalizers = nodestream_plugin_cool.normalizers',\n        ]\n    }\n)\n"})})})]}),"\n",(0,r.jsx)(n.h3,{id:"using-a-normalizer",children:"Using a Normalizer"}),"\n",(0,r.jsxs)(n.p,{children:["You can now use your normalizer in sections that handle normalization flags. For more information,\nsee the ",(0,r.jsx)(n.a,{href:"../../reference/interpreting",children:"Interpretation's reference"}),". For example, if you are using this\nin a source node interpretation, you could use it as follows:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"interpretations:\n  - type: source_node\n    node_type: Metric\n    key:\n      value: !jmespath value\n    normalization:\n      do_round_numbers: true\n"})}),"\n",(0,r.jsx)(n.h2,{id:"creating-an-argument-resolver",children:"Creating an Argument Resolver"}),"\n",(0,r.jsxs)(n.p,{children:["A ArgumentResolver allows you to inline a value into the Pipeline or project file before the pipeline is initialized.\nFor more information, see the ",(0,r.jsx)(n.a,{href:"../../tutorials-intermediate/configuring-projects",children:"Configuring Projects and Pipelines"}),".\nThis can be useful for passing configuration from files, environment, secret stores, and the like."]}),"\n",(0,r.jsx)(n.h3,{id:"implementing-a-new-argument-resolver",children:"Implementing a New Argument Resolver"}),"\n",(0,r.jsxs)(n.p,{children:["Definfing a new argument resolver is simple. You need to subclass from the ",(0,r.jsx)(n.code,{children:"ArgumentResolver"})," class and implement the ",(0,r.jsx)(n.code,{children:"resolve_arugment"})," method.\nFor example, let's create an argument resolver that retrieves a secret from ",(0,r.jsx)(n.a,{href:"https://aws.amazon.com/secrets-manager/",children:"amazon's secret manager"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import boto3\n\nfrom nodestream.pipeline.argument_resolvers import ArgumentResolver\n\n\nclass SecretResolver(ArgumentResolver, alias="secret"):\n    @staticmethod\n    def resolve_argument(variable_name):\n        client = boto3.client("secretsmanager")\n        return client.get_secret_value(SecretId=variable_name)["SecretString"]\n'})}),"\n",(0,r.jsx)(n.h3,{id:"registering-the-new-argument-resolver",children:"Registering the New Argument Resolver"}),"\n",(0,r.jsxs)(n.p,{children:["ArgumentResolvers are registered via the ",(0,r.jsx)(n.a,{href:"https://setuptools.pypa.io/en/latest/userguide/entry_point.html#entry-points-for-plugins",children:"entry_points"})," API of a Python Package. Specifically, the ",(0,r.jsx)(n.code,{children:"entry_point"})," named ",(0,r.jsx)(n.code,{children:"argument_resolvers"})," inside of the ",(0,r.jsx)(n.code,{children:"nodestream.plugins"})," group is loaded. It is expected to be a subclass of ",(0,r.jsx)(n.code,{children:"nodestream.pipeline.argument_resolvers:ArgumentResolver"})," as directed above."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"entry_point"})," should be a module that contains at least one argument resolver class. At runtime, the module will be loaded and all classes that inherit from ",(0,r.jsx)(n.code,{children:"nodestream.pipeline.argument_resolvers:ArgumentResolver"})," will be registered."]}),"\n",(0,r.jsxs)(i.c,{defaultValue:"pyproject",values:[{label:"pyproject.toml",value:"pyproject"},{label:"poetry",value:"poetry"},{label:"setup.cfg",value:"setup-cfg"},{label:"setup.py",value:"setup-py"}],children:[(0,r.jsx)(s.c,{value:"pyproject",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:'[project.entry-points."nodestream.plugins"]\nargument_resolvers = "my_python_package.argument_resolvers"\n'})})}),(0,r.jsx)(s.c,{value:"poetry",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:'[tool.poetry.plugins."nodestream.plugins"]\nargument_resolvers = "my_python_package.argument_resolvers"\n'})})}),(0,r.jsx)(s.c,{value:"setup-cfg",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ini",children:"[options.entry_points]\nnodestream.plugins =\n    argument_resolvers = my_python_package.argument_resolvers\n"})})}),(0,r.jsx)(s.c,{value:"setup-py",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from setuptools import setup\n\nsetup(\n    # ...,\n    entry_points = {\n        'nodestream.plugins': [\n            'argument_resolvers = nodestream_plugin_cool.argument_resolvers',\n        ]\n    }\n)\n"})})})]}),"\n",(0,r.jsx)(n.h3,{id:"using-an-argument-resolver",children:"Using an Argument Resolver"}),"\n",(0,r.jsxs)(n.p,{children:["You can now use your argument resolver in sections that handle argument resolution. For more information, see the ",(0,r.jsx)(n.a,{href:"../../tutorials-intermediate/configuring-projects",children:"Configuring Projects and Pipelines"}),". For example, if you are using this in a pipeline file, you could use it as follows:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"arguments:\n  - name: !secret my_secret_key_in_secrets_manager\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.M)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},3008:(e,n,t)=>{t.d(n,{c:()=>s});t(1504);var r=t(5456);const a={tabItem:"tabItem_Ymn6"};var i=t(7624);function s(e){let{children:n,hidden:t,className:s}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,r.c)(a.tabItem,s),hidden:t,children:n})}},8888:(e,n,t)=>{t.d(n,{c:()=>w});var r=t(1504),a=t(5456),i=t(3943),s=t(5592),o=t(5288),l=t(632),d=t(7128),c=t(1148);function p(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return p(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:a}}=e;return{value:n,label:t,attributes:r,default:a}}))}(t);return function(e){const n=(0,d.w)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function h(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const a=(0,s.Uz)(),i=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l._M)(i),(0,r.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(a.location.search);n.set(i,e),a.replace({...a.location,search:n.toString()})}),[i,a])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,i=u(e),[s,l]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:i}))),[d,p]=m({queryString:t,groupId:a}),[g,v]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,i]=(0,c.IN)(t);return[a,(0,r.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:a}),x=(()=>{const e=d??g;return h({value:e,tabValues:i})?e:null})();(0,o.c)((()=>{x&&l(x)}),[x]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!h({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),p(e),v(e)}),[p,v,i]),tabValues:i}}var v=t(3664);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=t(7624);function y(e){let{className:n,block:t,selectedValue:r,selectValue:s,tabValues:o}=e;const l=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.MV)(),c=e=>{const n=e.currentTarget,t=l.indexOf(n),a=o[t].value;a!==r&&(d(n),s(a))},p=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.c)("tabs",{"tabs--block":t},n),children:o.map((e=>{let{value:n,label:t,attributes:i}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>l.push(e),onKeyDown:p,onClick:c,...i,className:(0,a.c)("tabs__item",x.tabItem,i?.className,{"tabs__item--active":r===n}),children:t??n},n)}))})}function j(e){let{lazy:n,children:t,selectedValue:a}=e;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function b(e){const n=g(e);return(0,f.jsxs)("div",{className:(0,a.c)("tabs-container",x.tabList),children:[(0,f.jsx)(y,{...e,...n}),(0,f.jsx)(j,{...e,...n})]})}function w(e){const n=(0,v.c)();return(0,f.jsx)(b,{...e,children:p(e.children)},String(n))}},2172:(e,n,t)=>{t.d(n,{I:()=>o,M:()=>s});var r=t(1504);const a={},i=r.createContext(a);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);